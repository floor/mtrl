// src/components/chip/_styles.scss
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;

$component: '#{base.$prefix}-chip';

.#{$component} {
  // Base styles
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  height: v.chip('height');
  padding: 0 v.chip('padding-horizontal');
  border-radius: v.chip('border-radius');
  background-color: transparent;
  max-width: 100%;
  overflow: hidden;
  user-select: none;
  cursor: pointer;
  
  // Typography
  @include m.typography('label-large');
  
  // Interaction styles
  @include m.motion-transition(background-color, color, border-color, box-shadow);
  
  // Focus styles
  &:focus {
    outline: none;
  }
  
  &:focus-visible {
    outline: 2px solid t.color('outline');
    outline-offset: 2px;
  }
  
  // Disabled state
  &--disabled {
    opacity: 0.38;
    pointer-events: none;
  }
  
  // Content container
  &-content {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }
  
  // Ensure proper layout with icons
  &-leading-icon,
  &-trailing-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 18px;
    height: 18px;
    
    svg {
      width: 18px;
      height: 18px;
    }
  }
  
  &-leading-icon {
    margin-right: 8px;
  }
  
  &-trailing-icon {
    margin-left: 8px;
    
    &:hover {
      opacity: 0.7;
    }
  }
  
  &-text {
    // Text truncation for long chip labels
    @include m.truncate;
  }
  
  // Selected state
  &--selected {
    // Default selected state styling (can be overridden by variants)
    background-color: t.alpha('on-surface', 0.12);
    font-weight: 500;
  }
  
  // Ripple container
  .ripple {
    position: absolute;
    border-radius: 50%;
    transform: scale(0);
    pointer-events: none;
    background-color: currentColor;
    opacity: 0.12;
  }
  
  // Variants
  &--filled {
    background-color: t.color('surface-container-highest');
    color: t.color('on-surface');
    
    &:hover {
      @include m.state-layer(t.color('on-surface'), 'hover');
    }
    
    &:active {
      @include m.state-layer(t.color('on-surface'), 'pressed');
    }
    
    &.#{$component}--selected {
      background-color: t.color('secondary-container');
      color: t.color('on-secondary-container');
      
      &:hover {
        @include m.state-layer(t.color('on-secondary-container'), 'hover');
      }
      
      &:active {
        @include m.state-layer(t.color('on-secondary-container'), 'pressed');
      }
    }
  }
  
  &--outlined {
    border: 1px solid t.color('outline');
    color: t.color('on-surface');
    
    &:hover {
      @include m.state-layer(t.color('on-surface'), 'hover');
    }
    
    &:active {
      @include m.state-layer(t.color('on-surface'), 'pressed');
    }
    
    &.#{$component}--selected {
      border-color: t.color('outline');
      background-color: t.color('secondary-container');
      color: t.color('on-secondary-container');
      
      &:hover {
        @include m.state-layer(t.color('on-secondary-container'), 'hover');
      }
    }
  }
  
  &--elevated {
    background-color: t.color('surface-container-low');
    color: t.color('on-surface');
    @include m.elevation(1);
    
    &:hover {
      @include m.state-layer(t.color('on-surface'), 'hover');
      @include m.elevation(2);
    }
    
    &:active {
      @include m.state-layer(t.color('on-surface'), 'pressed');
      @include m.elevation(1);
    }
    
    &.#{$component}--selected {
      background-color: t.color('secondary-container');
      color: t.color('on-secondary-container');
      
      &:hover {
        @include m.state-layer(t.color('on-secondary-container'), 'hover');
      }
    }
  }
  
  // Filter chip specific styling
  &--filter {
    background-color: t.color('surface-container-highest');
    color: t.color('on-surface');
    
    &:hover {
      @include m.state-layer(t.color('on-surface'), 'hover');
    }
    
    &.#{$component}--selected {
      background-color: t.color('secondary-container');
      color: t.color('on-secondary-container');
      
      .#{$component}-leading-icon {
        color: t.color('on-secondary-container');
      }
    }
  }
  
  // Assist chip specific styling
  &--assist {
    background-color: t.color('surface-container-low');
    color: t.color('on-surface');
    
    .#{$component}-leading-icon {
      color: t.color('primary');
    }
    
    &.#{$component}--selected {
      background-color: t.color('secondary-container');
      color: t.color('on-secondary-container');
      
      .#{$component}-leading-icon {
        color: t.color('on-secondary-container');
      }
    }
  }
  
  // Input chip specific styling
  &--input {
    background-color: t.color('surface-container-highest');
    color: t.color('on-surface');
    
    .#{$component}-trailing-icon {
      cursor: pointer;
      
      &:hover {
        color: t.color('error');
      }
    }
  }
  
  // Suggestion chip styling
  &--suggestion {
    background-color: t.color('surface-container');
    color: t.color('on-surface');
    
    &.#{$component}--selected {
      background-color: t.color('secondary-container');
      color: t.color('on-secondary-container');
    }
  }
  
  // Size variants
  &--small {
    height: 24px;
    padding: 0 8px;
    font-size: 12px;
    
    .#{$component}-leading-icon,
    .#{$component}-trailing-icon {
      width: 16px;
      height: 16px;
      
      svg {
        width: 16px;
        height: 16px;
      }
    }
  }
  
  &--medium {
    // Default size, styles already defined
  }
  
  &--large {
    height: 40px;
    padding: 0 16px;
    font-size: 16px;
    
    .#{$component}-leading-icon,
    .#{$component}-trailing-icon {
      width: 20px;
      height: 20px;
      
      svg {
        width: 20px;
        height: 20px;
      }
    }
  }
}

// Chip set container
.#{base.$prefix}-chip-set {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  
  &--scrollable {
    flex-wrap: nowrap;
    overflow-x: auto;
    padding-bottom: 8px;
    margin-bottom: -8px; // Compensate for padding to maintain vertical alignment
    -webkit-overflow-scrolling: touch; // Smooth scrolling on iOS
    
    // Hide scrollbar in various browsers while maintaining functionality
    &::-webkit-scrollbar {
      height: 4px;
    }
    
    &::-webkit-scrollbar-thumb {
      background-color: t.alpha('on-surface', 0.2);
      border-radius: 4px;
    }
    
    // Style for Firefox
    scrollbar-width: thin;
    scrollbar-color: t.alpha('on-surface', 0.2) transparent;
  }
  
  &--vertical {
    flex-direction: column;
    align-items: flex-start;
  }
}