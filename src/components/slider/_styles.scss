// src/components/slider/_styles.scss
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;

$component: '#{base.$prefix}-slider';

.#{$component} {
  // Base styles
  position: relative;
  width: 100%;
  height: 40px;
  display: flex;
  align-items: center;
  user-select: none;
  touch-action: none;
  
  // Track
  &-track {
    position: relative;
    width: 100%;
    height: 10px; // Further increased track height
    background-color: t.color('surface-container-highest');
    border-radius: 5px; // Adjusted for thicker track
    overflow: hidden;
    cursor: pointer;
    
    // Disabled state
    .#{$component}--disabled & {
      opacity: 0.38;
      cursor: not-allowed;
    }
  }
  
  // Active track (filled part)
  &-active-track {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background-color: t.color('primary');
    transform-origin: left center;
    transition: transform 0.1s ease;
    border-radius: 5px; // Adjusted for thicker track

    .#{$component}--secondary & {
      background-color: t.color('secondary');
    }
    
    .#{$component}--tertiary & {
      background-color: t.color('tertiary');
    }
    
    .#{$component}--error & {
      background-color: t.color('error');
    }
  }
  
  // Dot elements for track ends (separate from thumbs)
  &-dot {
    position: absolute;
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: t.color('primary');
    top: 50%;
    transform: translateY(-50%);
    z-index: 1;
    
    // Start dot
    &--start {
      left: 0;
    }
    
    // End dot
    &--end {
      right: 0;
    }
    
    // Color variants
    .#{$component}--secondary & {
      background-color: t.color('secondary');
    }
    
    .#{$component}--tertiary & {
      background-color: t.color('tertiary');
    }
    
    .#{$component}--error & {
      background-color: t.color('error');
    }
    
    // Disabled state
    .#{$component}--disabled & {
      opacity: 0.38;
    }
  }
  
  // Thumb - changed from circle to bar
  &-thumb {
    position: absolute;
    width: 4px; // Narrow bar width
    height: 24px; // Taller than the track, adjusted for thicker track
    border-radius: 2px; // Slight rounding on the bar
    background-color: t.color('primary');
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
    top: 50%;
    transform: translate(-50%, -50%);
    cursor: pointer;
    z-index: 1;
    transition: transform 0.1s ease, box-shadow 0.1s ease, background-color 0.15s ease;
    
    // Color variants
    .#{$component}--secondary & {
      background-color: t.color('secondary');
    }
    
    .#{$component}--tertiary & {
      background-color: t.color('tertiary');
    }
    
    .#{$component}--error & {
      background-color: t.color('error');
    }
    
    // Hover state
    &:hover {
      transform: translate(-50%, -50%) scale(1.1);
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
      
      // Disabled state
      .#{$component}--disabled & {
        transform: translate(-50%, -50%);
        box-shadow: none;
      }
    }
    
    // Focused state
    &:focus {
      outline: none;
      transform: translate(-50%, -50%) scale(1.1);
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    }
    
    // Active state
    &:active {
      transform: translate(-50%, -50%) scale(1.15);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);
    }
    
    // Disabled state
    .#{$component}--disabled & {
      opacity: 0.38;
      cursor: not-allowed;
      box-shadow: none;
    }
  }
  
  // Tick marks
  &-tick {
    position: absolute;
    width: 2px;
    height: 2px;
    background-color: t.color('outline');
    border-radius: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
    
    // Active tick (filled)
    &--active {
      background-color: t.alpha('on-primary', 0.38);
      
      .#{$component}--secondary & {
        background-color: t.alpha('on-secondary', 0.38);
      }
      
      .#{$component}--tertiary & {
        background-color: t.alpha('on-tertiary', 0.38);
      }
      
      .#{$component}--error & {
        background-color: t.alpha('on-error', 0.38);
      }
    }
  }
  
  // Labels for tick marks
  &-label {
    position: absolute;
    font-size: 12px;
    color: t.color('on-surface-variant');
    top: 20px;
    transform: translateX(-50%);
    white-space: nowrap;
    pointer-events: none;
  }
  
  // Range slider styles (for two thumbs)
  &--range {
    .#{$component}-thumb {
      &:nth-of-type(1) {
        z-index: 2;
      }
    }
    
    // In range mode, hide the default end dot and only show the active dots
    .#{$component}-dot--end {
      display: none;
    }
  }
  
  // Value bubble (shows current value when dragging)
  &-value {
    position: absolute;
    top: -30px;
    left: 0;
    background-color: t.color('primary');
    color: t.color('on-primary');
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 12px;
    transform: translateX(-50%);
    visibility: hidden;
    opacity: 0;
    transition: opacity 0.2s ease, visibility 0s linear 0.2s;
    pointer-events: none;
    
    .#{$component}--secondary & {
      background-color: t.color('secondary');
      color: t.color('on-secondary');
    }
    
    .#{$component}--tertiary & {
      background-color: t.color('tertiary');
      color: t.color('on-tertiary');
    }
    
    .#{$component}--error & {
      background-color: t.color('error');
      color: t.color('on-error');
    }
    
    // Show value when dragging
    &--visible {
      visibility: visible;
      opacity: 1;
      transition: opacity 0.2s ease, visibility 0s;
    }
  }
  
  // Vertical orientation
  &--vertical {
    width: 40px;
    height: 200px;
    flex-direction: column;
    
    .#{$component}-track {
      width: 10px; // Match the horizontal track thickness
      height: 100%;
    }
    
    .#{$component}-active-track {
      width: 100%;
      height: auto;
      transform-origin: bottom center;
    }
    
    .#{$component}-thumb {
      width: 24px; // Taller in vertical orientation
      height: 4px; // Match the horizontal thumb width
      left: 50%;
      transform: translate(-50%, 50%);
      
      &:hover,
      &:focus {
        transform: translate(-50%, 50%) scale(1.1);
      }
      
      &:active {
        transform: translate(-50%, 50%) scale(1.15);
      }
      
      .#{$component}--disabled & {
        transform: translate(-50%, 50%);
      }
    }
    
    // Dots for vertical orientation
    .#{$component}-dot {
      left: 50%;
      top: auto;
      transform: translateX(-50%);
      
      &--start {
        bottom: 0;
      }
      
      &--end {
        top: 0;
      }
    }
    
    .#{$component}-tick {
      left: 50%;
      transform: translate(-50%, 50%);
    }
    
    .#{$component}-label {
      top: auto;
      left: 20px;
      transform: translateY(50%);
    }
    
    .#{$component}-value {
      top: auto;
      left: -30px;
      transform: translateY(50%);
    }
  }
  
  // Discrete slider with steps
  &--discrete {
    .#{$component}-tick {
      width: 4px;
      height: 4px;
    }
  }
  
  // Sizes
  &--small {
    height: 32px;
    
    .#{$component}-thumb {
      width: 3px; // Slightly smaller
      height: 16px;
    }
    
    &.#{$component}--vertical {
      width: 32px;
      
      .#{$component}-thumb {
        width: 16px;
        height: 3px;
      }
    }
  }
  
  &--large {
    height: 48px;
    
    .#{$component}-thumb {
      width: 5px; // Slightly larger
      height: 24px;
    }
    
    &.#{$component}--vertical {
      width: 48px;
      
      .#{$component}-thumb {
        width: 24px;
        height: 5px;
      }
    }
  }
}