// src/components/slider/_styles.scss
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;

// $transform: transform 0.2s ease, width 0.2s ease, height 0.2s ease;
$transform: none;

$component: '#{base.$prefix}-slider';

.#{$component} {
  // Base styles
  position: relative;
  width: 100%;
  height: 40px;
  display: flex;
  align-items: center;
  user-select: none;
  touch-action: none;
  
  // Container should not have a focus outline
  &:focus {
    outline: none;
  }
  
  &-track {
    position: relative;
    width: 100%;
    padding: 0 4px;
    height: 16px;
    background-color: transparent;
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    
    // Disabled state
    .#{$component}--disabled & {
      opacity: 0.38;
      cursor: not-allowed;
    }
  }
 
  // Thumb - updated with T-shape and proper focus styles
  &-thumb {
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    cursor: pointer;
    z-index: 4;
    padding: 4px 0;
    transition: $transform;
    width: 16px;
    height: 50px;
    border-radius: 16px;
    background-color: rgba(red, .0);

    // Focus styles for keyboard navigation
    &:focus {
      outline: 2px solid t.color('outline');
    }
    
    // Class added when focused via keyboard
    &--focused {
      // Additional styling when focused
    }

    // Create a T-shaped thumb using pseudo-elements
    &::before {
      pointer-events: none;
      content: '';
      position: absolute;
      width: 4px;
      height: 40px;
      background-color: t.color('primary');
      border-radius: 2px;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      transition: background-color 0.15s ease, width 0.15s ease;
      
      .#{$component}--secondary & {
        background-color: t.color('secondary');
      }
      
      .#{$component}--tertiary & {
        background-color: t.color('tertiary');
      }
      
      .#{$component}--error & {
        background-color: t.color('error');
      }
      
      .#{$component}--disabled & {
        background-color: t.color('on-surface');
        opacity: 0.38;
      }
    }
    
    // Enable pointer events on the pseudo-element
    &::before {
      pointer-events: auto;
    }
    
    // Make thumb line slimmer during dragging (feedback)
    .#{$component}--dragging & {
      &::before {
        width: 3px;
      }
    }
    
    // Hover state
    &:hover::before {
      background-color: t.color('primary');
      
      .#{$component}--secondary & {
        background-color: t.color('secondary');
      }
      
      .#{$component}--tertiary & {
        background-color: t.color('tertiary');
      }
      
      .#{$component}--error & {
        background-color: t.color('error');
      }
      
      .#{$component}--disabled & {
        background-color: t.color('on-surface');
        opacity: 0.38;
      }
    }
    
    // Active state
    &:active::before {
      background-color: t.color('primary');
      width: 3px; // Shrink width when active for visual feedback
      
      .#{$component}--secondary & {
        background-color: t.color('secondary');
      }
      
      .#{$component}--tertiary & {
        background-color: t.color('tertiary');
      }
      
      .#{$component}--error & {
        background-color: t.color('error');
      }
    }
    
    // Disabled state
    .#{$component}--disabled & {
      cursor: not-allowed;
      
      &::before {
        opacity: 0.38;
        background-color: t.color('on-surface');
      }
    }
  }

  // Start track (for range slider)
  &-start-track {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background-color: t.color('primary');
    transform-origin: left center;
    transition: $transform;
    border-radius: 2px;
    opacity: 0.24;
    z-index: 1;
    
    .#{$component}--secondary & {
      background-color: t.color('secondary');
    }
    
    .#{$component}--tertiary & {
      background-color: t.color('tertiary');
    }
    
    .#{$component}--error & {
      background-color: t.color('error');
    }
    
    .#{$component}--disabled & {
      opacity: 0.12;
    }
  }
  
  // Active track (filled part)
  &-active-track {
    position: absolute;
    top: 0;
    height: 100%;
    background-color: t.color('primary');
    transform-origin: left center;
    transition: $transform;
    border-radius: 2px;
    z-index: 1;

    .#{$component}--secondary & {
      background-color: t.color('secondary');
    }
    
    .#{$component}--tertiary & {
      background-color: t.color('tertiary');
    }
    
    .#{$component}--error & {
      background-color: t.color('error');
    }
  }
  
  // Remaining track (unfilled part)
  &-remaining-track {
    opacity: .24;
    position: absolute;
    top: 0;
    height: 100%;
    background-color: t.color('primary');
    transform-origin: left center;
    transition: $transform;
    border-radius: 2px;
    width: 100%;
    z-index: 0;
    
    .#{$component}--secondary & {
      background-color: t.color('secondary');
    }
    
    .#{$component}--tertiary & {
      background-color: t.color('tertiary');
    }
    
    .#{$component}--error & {
      background-color: t.color('error');
    }
    
    .#{$component}--disabled & {
      opacity: 0.12;
    }
  }
  
  // Dot elements for track ends (visual anchors for accessibility)
  &-dot {
    pointer-events: none;
    position: absolute;
    width: 4px;
    height: 4px;
    border-radius: 50%;
    top: 50%;
    transform: translateY(-50%);
    z-index: 1;
    
    // Start dot
    &--start {
      left: 6px;
      background-color: t.color('on-primary');
      
      .#{$component}--secondary & {
        background-color: t.color('on-secondary');
      }
      
      .#{$component}--tertiary & {
        background-color: t.color('on-tertiary');
      }
    }
    
    // End dot
    &--end {
      right: 6px;
      background-color: t.color('primary');
      
      .#{$component}--secondary & {
        background-color: t.color('secondary');
      }
      
      .#{$component}--tertiary & {
        background-color: t.color('tertiary');
      }
    }
    
    .#{$component}--disabled & {
      opacity: 0.38;
    }
  }
  
  
  // Container for ticks
  &-ticks-container {
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    pointer-events: none;
    z-index: 3;
  }
  
  // Tick marks
  &-tick {
    position: absolute;
    width: 2px;
    height: 2px;
    background-color: t.color('outline');
    border-radius: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
    opacity: 1;
    
    &:last-child, &:first-child {
      display: none
    }

    // Active tick (filled)
    &--active {
      background-color: t.color('on-primary');
      
      .#{$component}--secondary & {
        background-color: t.color('on-secondary');
      }
      
      .#{$component}--tertiary & {
        background-color: t.color('on-tertiary');
      }
    }
    
    // Inactive tick (unfilled)
    &--inactive {
      background-color: t.color('primary');

      .#{$component}--secondary & {
        background-color: t.color('secondary');
      }
      
      .#{$component}--tertiary & {
        background-color: t.color('tertiary');
      }
    }

     // Hidden tick
    &--hidden {
      opacity: 0
    }
  }
  
  // Range slider styles
  &--range {
    .#{$component}-thumb {
      &:nth-of-type(1) {
        z-index: 3;
      }
    }
    
    // In range mode, both dots should be visible
    .#{$component}-dot {
      z-index: 2;
    }
  }
  
  // Value bubble - shows current value during interaction
  &-value {
    position: absolute;
    top: -40px;
    left: 0;
    background-color: t.color('on-surface');
    color: t.color('surface-container-highest');
    padding: 6px 12px;
    border-radius: 21px;
    font-size: 14px;
    font-weight: 600;
    transform: translateX(-50%);
    visibility: hidden;
    opacity: 0;
    transition: opacity 0.2s ease, visibility 0s linear 0.2s;
    pointer-events: none;
    
    // Show value when interacting
    &--visible {
      visibility: visible;
      opacity: 1;
      transition: opacity 0.2s ease, visibility 0s;
    }
  }
  
  // Discrete slider with steps
  &--discrete {
    .#{$component}-tick {
      width: 4px;
      height: 4px;
    }
  }
  
  // Sizes
  &--small {
    height: 32px;
    
    .#{$component}-thumb {
      &::before {
        height: 34px;
      }
    }
  }
  
  &--large {
    height: 48px;
    
    .#{$component}-thumb {
      &::before {
        height: 48px;
      }
    }
  }
  
  // For dragging state - visual feedback
  &--dragging {
    // No transitions during dragging for responsive feel
    .#{$component}-start-track, 
    .#{$component}-active-track, 
    .#{$component}-remaining-track, 
    .#{$component}-thumb {
      transition: none;
    }
  }
}