// src/components/tabs/_styles.scss
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;

$component: '#{base.$prefix}-tab';
$container: '#{base.$prefix}-tabs';

// Tabs Container Styles
.#{$container} {
  position: relative;
  display: flex;
  flex-direction: column;
  width: 100%;
  background-color: t.color('surface');
  box-sizing: border-box;
  
  // Basic container sizing
  &--primary {
    height: 48px;
    
    // Increase height when tabs have icons and text
    .#{$component}--icon-and-text + & {
      height: 64px;
    }
  }
  
  &--secondary {
    height: 48px;
  }
  
  // Scrollable container
  &--scrollable {
    overflow: hidden;
    
    .#{$container}-scroll {
      display: flex;
      overflow-x: auto;
      scrollbar-width: none; // Firefox
      -ms-overflow-style: none; // IE and Edge
      
      &::-webkit-scrollbar {
        display: none; // Chrome, Safari, and Opera
      }
    }
  }
  
  // Container divider
  &-divider {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background-color: t.color('outline-variant');
  }
}

// Individual Tab Styles
.#{$component} {
  position: relative;
  display: inline-flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-width: 90px;
  flex: 1;
  padding: 0 16px;
  border: none;
  background-color: transparent;
  color: t.color('on-surface-variant');
  cursor: pointer;
  user-select: none;
  
  // Typography for label text
  @include m.typography('label-large');
  
  // Transition for state changes
  @include m.motion-transition(
    background-color, 
    color
  );
  
  // Container heights based on layout
  &--text-only {
    height: 48px;
  }
  
  &--icon-only {
    height: 48px;
  }
  
  &--icon-and-text {
    height: 64px;
  }
  
  // Focus styles
  &:focus {
    outline: none;
  }
  
  &:focus-visible {
    outline: 2px solid t.color('outline');
    outline-offset: 2px;
  }
  
  // Disable state
  &:disabled, &--disabled {
    pointer-events: none;
    opacity: 0.38;
  }
  
  // Tab Icon
  &-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    
    svg {
      width: 24px;
      height: 24px;
    }
  }
  
  // Ensure proper vertical spacing for icon and text
  &--icon-and-text {
    .#{$component}-icon {
      margin-bottom: 8px;
    }
  }
  
  // Tab Text
  &-text {
    @include m.truncate;
    text-align: center;
    
    .#{$component}--icon-only & {
      @include m.visually-hidden;
    }
  }
  
  // Badge styling handled by the Badge component
  // We only need to adjust badge positioning for different tab layouts
  .#{base.$prefix}-badge-wrapper {
    .#{base.$prefix}-badge {
      // Position for icon-only tabs
      &--top-right {
        .#{$component}--icon-only & {
          top: 8px;
          right: 8px;
        }
        
        .#{$component}--text-only & {
          top: 8px;
          right: 16px;
        }
        
        .#{$component}--icon-and-text & {
          top: 8px;
          right: calc(50% - 18px);
        }
      }
    }
  }
  
  // Active Indicator
  &::after {
    content: '';
    position: absolute;
    left: 2px;
    right: 2px;
    bottom: 0;
    min-width: 24px;
    height: 0;
    border-radius: 3px 3px 0 0;
    opacity: 0;
    transition: height 0.2s ease, opacity 0.2s ease;
  }
  
  // Primary Tab Variants
  .#{$container}--primary & {
    &.#{$component}--active {
      color: t.color('primary');
      
      .#{$component}-icon {
        color: t.color('primary');
      }
      
      // Active indicator for primary tabs
      &::after {
        background-color: t.color('primary');
        height: 3px;
        opacity: 1;
      }
    }
    
    // Hover state
    &:hover:not(:disabled):not(.#{$component}--active) {
      @include m.state-layer(t.color('on-surface-variant'), 'hover');
    }
    
    // Pressed state
    &:active:not(:disabled) {
      @include m.state-layer(t.color('on-surface-variant'), 'pressed');
    }
  }
  
  // Secondary Tab Variants
  .#{$container}--secondary & {
    color: t.color('on-surface-variant');
    
    &.#{$component}--active {
      color: t.color('on-surface');
      
      .#{$component}-icon {
        color: t.color('on-surface');
      }
      
      // Active indicator for secondary tabs
      &::after {
        background-color: t.color('primary');
        height: 2px;
        opacity: 1;
      }
    }
    
    // Hover state
    &:hover:not(:disabled):not(.#{$component}--active) {
      @include m.state-layer(t.color('on-surface-variant'), 'hover');
    }
    
    // Pressed state
    &:active:not(:disabled) {
      @include m.state-layer(t.color('on-surface-variant'), 'pressed');
    }
  }
  
  // Ripple container (used by ripple feature)
  .ripple {
    position: absolute;
    border-radius: 50%;
    transform: scale(0);
    pointer-events: none;
    background-color: currentColor;
    opacity: 0.12;
  }
}