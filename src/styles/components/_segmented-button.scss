// src/components/segmented-button/_styles.scss
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;

$component: '#{base.$prefix}-segmented-button';

.#{$component} {
  // Base styles
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: 20px; // Half of height per MD3 specs
  border: 1px solid t.color('outline');
  background-color: transparent;
  overflow: hidden;
  
  // Density variables with defaults (Material Design 3 standard density)
  --segment-height: 40px;
  --segment-padding-x: 24px;
  --segment-padding-icon-only: 12px;
  --segment-padding-icon-text-left: 16px;
  --segment-padding-icon-text-right: 24px;
  --segment-icon-size: 18px;
  --segment-text-size: 0.875rem;
  --segment-border-radius: 20px;
  
  // Set height from the CSS variable
  height: var(--segment-height);
  // Adjust border radius based on height
  border-radius: calc(var(--segment-height) / 2);
  
  // Comfortable density (medium)
  &--comfortable {
    --segment-height: 36px;
    --segment-padding-x: 20px;
    --segment-padding-icon-only: 10px;
    --segment-padding-icon-text-left: 14px;
    --segment-padding-icon-text-right: 20px;
    --segment-icon-size: 16px;
    --segment-text-size: 0.8125rem;
    --segment-border-radius: 18px;
    
    border-radius: var(--segment-border-radius);
  }
  
  // Compact density (small)
  &--compact {
    --segment-height: 32px;
    --segment-padding-x: 16px;
    --segment-padding-icon-only: 8px;
    --segment-padding-icon-text-left: 12px;
    --segment-padding-icon-text-right: 16px;
    --segment-icon-size: 16px;
    --segment-text-size: 0.75rem;
    --segment-border-radius: 16px;
    
    border-radius: var(--segment-border-radius);
  }
  
  // Disabled state for whole component
  &--disabled {
    opacity: 0.38;
    pointer-events: none;
  }

  // Style for button elements used as segments
  .#{base.$prefix}-button {
    // Reset button styles that we don't want
    margin: 0;
    box-shadow: none;
    background-color: transparent;
    border: none;
    position: relative; // For pseudo-elements
    border-radius: 0; // Reset any border-radius
    min-width: 48px;
    height: 100%;
    color: t.color('on-surface'); // Original color
    
    // Use CSS variables for dynamic sizing based on density
    padding: 0 var(--segment-padding-x);
    
    // Icon-only segments have equal padding all around
    &.#{base.$prefix}-button--circular {
      padding: 0 var(--segment-padding-icon-only);
    }
    
    // Segments with both icon and text
    &:has(.#{base.$prefix}-button-icon + .#{base.$prefix}-button-text) {
      padding: 0 var(--segment-padding-icon-text-right) 0 var(--segment-padding-icon-text-left);
    }
    
    // Only add border radius to first and last segments
    &:first-child {
      border-top-left-radius: var(--segment-border-radius);
      border-bottom-left-radius: var(--segment-border-radius);
    }
    
    &:last-child {
      border-top-right-radius: var(--segment-border-radius);
      border-bottom-right-radius: var(--segment-border-radius);
    }
    
    // Hover state - keeping original color
    &:hover:not([disabled]) {
      background-color: t.alpha('on-surface', 0.08);
    }
    
    // Focus state
    &:focus {
      outline: none;
    }
    
    &:focus-visible {
      outline: 2px solid t.color('outline');
      outline-offset: -2px;
    }
    
    // Replace border with pseudo-elements for better control
    // Each segment has its own right border (except last)
    &:not(:last-child)::after {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
      width: 1px;
      background-color: t.color('outline');
      pointer-events: none;
    }
    
    // Disabled state handling
    &[disabled] {
      opacity: 0.38;
      
      // When a disabled button has a right border, make it lower opacity
      &::after {
        background-color: t.alpha('outline', 0.38);
      }
      
      // When a disabled button is before a non-disabled button, let the non-disabled handle the border
      + .#{base.$prefix}-button:not([disabled])::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 1px;
        background-color: t.color('outline');
        pointer-events: none;
      }
      
      // When a disabled button is after a non-disabled button, make the non-disabled button's border low opacity
      &:not(:first-child) {
        &::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          height: 100%;
          width: 1px;
          background-color: t.alpha('outline', 0.38);
          pointer-events: none;
        }
      }
    }
    
    // Ensure all button styles are reset appropriately
    &.#{base.$prefix}-button--filled,
    &.#{base.$prefix}-button--outlined,
    &.#{base.$prefix}-button--tonal,
    &.#{base.$prefix}-button--elevated,
    &.#{base.$prefix}-button--text {
      background-color: transparent;
      box-shadow: none;
      color: t.color('on-surface');
    }
  }
  
  // Selected state
  .#{base.$prefix}-segment--selected {
    background-color: t.color('secondary-container');
    color: t.color('on-secondary-container');
    
    &:hover:not([disabled]) {
      background-color: t.alpha('secondary-container', 0.8);
    }
    
    // Ensure color change even with different button variants
    &.#{base.$prefix}-button--filled,
    &.#{base.$prefix}-button--outlined,
    &.#{base.$prefix}-button--tonal,
    &.#{base.$prefix}-button--elevated,
    &.#{base.$prefix}-button--text {
      background-color: t.color('secondary-container');
      color: t.color('on-secondary-container');
    }
  }
  
  // Ensure proper spacing in button contents
  .#{base.$prefix}-button-text {
    margin: 0;
    white-space: nowrap;
    @include m.typography('label-large');
    // Apply density-specific font sizing
    font-size: var(--segment-text-size);
  }
  
  .#{base.$prefix}-button-icon + .#{base.$prefix}-button-text {
    margin-left: 8px; // MD3 spec for space between icon and text
  }
  
  // Icon sizing per MD3
  .#{base.$prefix}-button-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    
    svg {
      width: var(--segment-icon-size);
      height: var(--segment-icon-size);
    }
  }
}