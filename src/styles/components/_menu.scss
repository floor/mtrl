// src/components/menu/_menu.scss
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/theme' as t;

$component: 'mtrl-menu';

.#{$component} {
  // Base styles
  @include m.typography('body-medium');
  @include m.shape('extra-small');
  
  position: fixed;
  z-index: f.get-z-index('menu');
  min-width: 112px;
  max-width: 280px;
  padding: 8px 0;
  background-color: t.color('surface-container');
  color: t.color('on-surface');
  @include m.elevation(2);
  
  // Initial state - hidden
  display: block;
  opacity: 0;
  transform: scale(0.8);
  transform-origin: top left;
  pointer-events: none;
  visibility: hidden; // Added for better measurement handling
  transition: opacity v.motion('duration-short2') v.motion('easing-standard'),
              transform v.motion('duration-short2') v.motion('easing-standard'),
              visibility 0s linear v.motion('duration-short2'); // Delay visibility change
  
  &--visible {
    opacity: 1;
    transform: scale(1);
    pointer-events: auto;
    visibility: visible;
    transition: opacity v.motion('duration-short2') v.motion('easing-standard'),
                transform v.motion('duration-short2') v.motion('easing-standard'),
                visibility 0s linear 0s; // No delay for visibility
  }
  
  &--submenu {
    position: absolute;
    z-index: f.get-z-index('menu') + 1;
  }

  // List container
  &-list {
    margin: 0;
    padding: 0;
    list-style: none;
    overflow-y: auto;
    max-height: calc(100vh - 96px);
    @include m.scrollbar;
  }

  // Menu items
  &-item {
    @include m.typography('body-large');
    @include m.flex-row;
    
    position: relative;
    min-height: 48px;
    padding: 12px 16px;
    cursor: pointer;
    user-select: none;
    color: t.color('on-surface');
    
    &:hover {
      @include m.state-layer(t.color('on-surface'), 'hover');
    }
    
    &:focus {
      @include m.state-layer(t.color('on-surface'), 'focus');
      outline: none;
    }
    
    &:active {
      @include m.state-layer(t.color('on-surface'), 'pressed');
    }

    // Submenu indicator
    &--submenu {
      padding-right: 48px;
      
      &::after {
        content: '';
        position: absolute;
        right: 16px;
        top: 50%;
        transform: translateY(-50%);
        width: 24px;
        height: 24px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' height='24' width='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='9 18 15 12 9 6'%3E%3C/polyline%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        opacity: 0.87;
        // This ensures the SVG inherits the exact same color as the menu item text
        color: inherit;
      }
      
      &[aria-expanded="true"] {
        @include m.state-layer(t.color('on-surface'), 'hover');
        
        &::after {
          opacity: 1;
        }
      }
    }

    // Disabled state
    &--disabled {
      pointer-events: none;
      color: t.alpha('on-surface', 0.38);
    }
  }

  // Divider
  &-divider {
    height: 1px;
    margin: 8px 0;
    background-color: t.color('outline-variant');
  }

  // Accessibility
  @include m.focus-ring('.#{$component}-item:focus-visible');
  
  @include m.reduced-motion {
    transition: none;
    
    .#{$component}-item {
      transition: none;
    }
  }
  
  @include m.high-contrast {
    border: 1px solid CurrentColor;
    
    .#{$component}-divider {
      background-color: CurrentColor;
    }
    
    .#{$component}-item--disabled {
      opacity: 1;
      color: GrayText;
    }
  }

  // RTL Support
  @include m.rtl {
    transform-origin: top right;
    
    .#{$component}-item {
      &--submenu {
        padding-right: 16px;
        padding-left: 48px;
        
        &::after {
          right: auto;
          left: 16px;
          transform: translateY(-50%) rotate(180deg);
        }
      }
    }
  }
}