// src/components/button/_styles.scss
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;

$component: '#{base.$prefix}-button';

.#{$component} {
  // Base styles
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: v.button('min-width');
  height: v.button('height');
  padding: 0 v.button('padding-horizontal');
  border: none;
  border-radius: v.button('border-radius');
  background-color: transparent;
  color: inherit;
  font: inherit;
  text-decoration: none;
  cursor: pointer;
  user-select: none;
  vertical-align: middle;
  appearance: none;
  overflow: hidden;
  will-change: border-radius, transform;
  
  // Typography
  @include m.typography('label-large');
  
  // Explicitly apply fast transition to border-radius
  transition: 
    background-color v.motion('duration-short2') v.motion('easing-standard'),
    color v.motion('duration-short2') v.motion('easing-standard'),
    box-shadow v.motion('duration-short2') v.motion('easing-standard'),
    border-radius v.motion('duration-short1') v.motion('easing-standard-accelerate'),
    transform v.motion('duration-short1') v.motion('easing-standard-accelerate');
  
  // Focus styles
  &:focus {
    outline: none;
  }
  
  &:focus-visible {
    outline: 2px solid t.color('outline');
    outline-offset: 2px;
  }
  
  // Interactive states
  &:disabled {
    pointer-events: none;
    color: t.alpha('surface', 0.38);
    background-color: t.alpha('surface', 0.12);
      
    .#{$component}-icon {
      color: t.alpha('surface', 0.38);
    }
  }
  
  // State layer for ripple effect
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: currentColor;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  // Ensure proper layout with icons
  &-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 18px;
    height: 18px;
    
    svg {
      width: 18px;
      height: 18px;
    }
    
    + .#{$component}-text {
      margin-left: 8px;
    }
  }
  
  &-text {
    // Text truncation for long button labels
    @include m.truncate;
    
    .#{$component}--icon-only & {
      @include m.visually-hidden;
    }
  }
  
  // Circular buttons
  &--circular {
    border-radius: 50%;
    padding: 8px;
    min-width: unset;
    width: 40px;
    height: 40px;
    display: inline-flex;
    align-items: center;
    justify-content: center;

    .#{$component}-icon {
      margin: 0;
    }
    .#{$component}-text {
      display: none;
    }
    
    // Allow the border-radius transition to work naturally
  }
  
  &--icon {
    padding: 0 v.button('padding-horizontal') 0 calc(v.button('padding-horizontal') / 2 + 4px);
  }
  
  &--active {
    // Common active state styling for all variants
    box-shadow: none;
    
    // Per MD3, buttons have a significantly more rectangular appearance when pressed
    border-radius: f.get-shape('small');
    
    // ARIA attribute to indicate active state for accessibility
    &[aria-expanded="true"] {
      // For compatibility with ARIA
    }
  }

  // FILLED BUTTON
  &--filled {
    background-color: t.color('primary');
    color: t.color('on-primary');
    
    &:hover {
      @include m.state-layer(t.color('on-primary'), 'hover');
      // According to MD3, filled buttons DO have elevation on hover
      @include m.elevation(1);
    }
    
    &:active,
    &.#{$component}--active {
      @include m.state-layer(t.color('on-primary'), 'pressed');
      // MD3 reduces elevation on press
      @include m.elevation(0);
      // MD3 uses a much more rectangular shape when pressed
      border-radius: f.get-shape('small');
    }
    &:disabled {
      @include m.elevation(0);
    }
  }
  
  // ELEVATED BUTTON
  &--elevated {
    background-color: t.color('surface-container-low');
    color: t.color('primary');
    @include m.elevation(1);
    
    &:hover {
      @include m.state-layer(t.color('primary'), 'hover');
      // MD3 increases elevation on hover
      @include m.elevation(2);
    }
    
    &:active,
    &.#{$component}--active {
      @include m.state-layer(t.color('primary'), 'pressed');
      // MD3 reduces elevation on press, but not completely removed
      @include m.elevation(1);
      // MD3 uses a much more rectangular shape when pressed
      border-radius: f.get-shape('small');
    }
    
    &:disabled {
      @include m.elevation(0);
      box-shadow: none;
    }
    
    // Handle icon color in elevated button
    .#{$component}-icon {
      color: t.color('primary');
    }
  }
  
  // TONAL BUTTON
  &--tonal {
    background-color: t.color('secondary-container');
    color: t.color('on-secondary-container');
    // MD3 tonal buttons have a subtle initial elevation
    @include m.elevation(0);
    
    &:hover {
      @include m.state-layer(t.color('on-secondary-container'), 'hover');
      // MD3 tonal buttons have elevation on hover
      @include m.elevation(1);
    }
    
    &:active,
    &.#{$component}--active {
      @include m.state-layer(t.color('on-secondary-container'), 'pressed');
      // MD3 reduces elevation on press
      @include m.elevation(0);
      // MD3 uses a much more rectangular shape when pressed
      border-radius: f.get-shape('small');
    }
    
    &:disabled {
      box-shadow: none;
    }
  }
  
  // OUTLINED BUTTON
  &--outlined {
    border: 1px solid t.color('outline');
    color: t.color('primary');
    
    &:hover {
      @include m.state-layer(t.color('primary'), 'hover');
    }
    
    &:active,
    &.#{$component}--active {
      @include m.state-layer(t.color('primary'), 'pressed');
      // MD3 uses a much more rectangular shape when pressed
      border-radius: f.get-shape('small');
    }
    
    &:disabled {
      border: 1px solid t.alpha('outline', 0.12);
    }
  }
  
  // TEXT BUTTON
  &--text {
    min-width: v.button('min-width');
    padding: 0 v.button('padding-horizontal-small');
    color: t.color('primary');
    
    &:hover {
      @include m.state-layer(t.color('primary'), 'hover');
    }
    
    &:active,
    &.#{$component}--active {
      @include m.state-layer(t.color('primary'), 'pressed');
      // MD3 uses a much more rectangular shape when pressed
      border-radius: f.get-shape('small');
    }
    
    &:disabled {
      background-color: transparent;  
    }
  }
  
  // Special case for icon-only buttons
  &--icon-only {
    min-width: v.button('height');
    width: v.button('height');
    padding: 0;
    border-radius: 50%;
  }
}

// FIX: Disabled on dark theme (recommandations do not work as expected)
body[data-theme-mode=dark] {
  // Interactive states
  .#{$component} {
    &:disabled {
      color: t.alpha('on-surface-dim', 0.38);
      background-color: t.alpha('surface-dim', 0.12);

      .#{$component}-text { 
        opacity: 0.38;
      }
      .#{$component}-icon {
        opacity: 0.38;
        color: t.alpha('on-surface-dim', 0.12);
      }
    }
  }
}