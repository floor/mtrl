// src/components/list/_list.scss
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;

// Component variables
$component: '#{base.$prefix}-list';
$list-item-height: 48px !default;
$list-item-dense-height: 40px !default;
$list-padding: 8px !default;
$list-item-padding: 16px !default;
$list-section-padding: 16px !default;
$list-container-min-height: 200px !default;

// Customized variables for smoother state transitions
$state-transition-duration: v.motion('duration-medium1') !default;  // Slightly longer for smoothness
$state-transition-easing: v.motion('easing-standard') !default;

// Component-specific mixins - using proper state layer implementation
@mixin list-item-state-layer($state: 'hover', $color: 'on-surface') {
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background-color: t.color($color);
    opacity: f.get-state-opacity($state);
    pointer-events: none;
    border-radius: inherit;
    // State layers transition - Using custom variable for duration
    transition: opacity $state-transition-duration $state-transition-easing;
  }
}

@mixin list-section-title {
  @include m.typography('label-large');
  color: t.color('primary');
  padding: $list-section-padding $list-item-padding 8px;
}

// LIST CONTAINER - Root component
.#{$component}-container {
  position: relative;
  overflow-y: auto;
  overflow-x: hidden;
  height: 100%;
  min-height: $list-container-min-height;
  background-color: t.color('surface');
  -webkit-overflow-scrolling: touch; // Improved scrolling on iOS
  scrollbar-width: thin; // Firefox
  transition: background-color $state-transition-duration $state-transition-easing;
  
  // Styling for webkit scrollbars
  &::-webkit-scrollbar {
    width: 8px;
  }
  
  &::-webkit-scrollbar-track {
    background: transparent;
  }
  
  &::-webkit-scrollbar-thumb {
    background-color: t.color('outline-variant');
    border-radius: 4px;
    transition: background-color $state-transition-duration $state-transition-easing;
    
    &:hover {
      background-color: t.alpha('outline', 0.38);
    }
  }

  // States
  &--loading {
    &::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(to right, transparent, t.color('primary'), transparent);
      animation: loading-shimmer 1.5s infinite v.motion('easing-standard');
    }
  }
}

// LIST COMPONENT
.#{$component} {
  display: flex;
  flex-direction: column;
  padding: $list-padding 0;
  width: 100%;
  position: relative;
  transition: padding $state-transition-duration $state-transition-easing,
              opacity $state-transition-duration $state-transition-easing;
  
  // For virtualized list inner content container
  &-content {
    position: relative;
    width: 100%;
  }

  // Sections
  &-section {
    display: flex;
    flex-direction: column;
    width: 100%;
    transition: margin-bottom $state-transition-duration $state-transition-easing;

    &:not(:last-child) {
      margin-bottom: $list-padding;
    }
  }

  &-section-title {
    @include list-section-title;
    transition: color $state-transition-duration $state-transition-easing;
  }

  // Dividers
  &-divider {
    height: 1px;
    margin: $list-padding 0;
    background-color: t.color('outline-variant');
    transition: background-color $state-transition-duration $state-transition-easing;
  }

  // Virtualization spacer (for scroll height)
  &-spacer {
    position: absolute;
    top: 0;
    left: 0;
    width: 1px;
    visibility: hidden;
    pointer-events: none;
  }

  // Empty state
  &-empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 32px 16px;
    text-align: center;
    color: t.color('on-surface-variant');
    transition: color $state-transition-duration $state-transition-easing,
                opacity $state-transition-duration $state-transition-easing;
    
    &-icon {
      font-size: 48px;
      margin-bottom: 16px;
      opacity: 0.6;
      transition: opacity $state-transition-duration $state-transition-easing;
    }
    
    &-text {
      @include m.typography('body-large');
      transition: color $state-transition-duration $state-transition-easing;
    }
    
    &-action {
      margin-top: 16px;
      transition: opacity $state-transition-duration $state-transition-easing;
    }
  }

  // Loading indicator (shown at bottom when loading more)
  &-loading-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 48px;
    width: 100%;
    color: t.color('on-surface-variant');
    transition: color $state-transition-duration $state-transition-easing;
    
    &::after {
      content: '';
      width: 24px;
      height: 24px;
      border: 2px solid currentColor;
      border-bottom-color: transparent;
      border-radius: 50%;
      animation: rotation 0.8s infinite linear;
    }
  }

  // Selection states
  &[data-type="single"],
  &[data-type="multi"],
  &[data-type="radio"] {
    .#{$component}-item {
      cursor: pointer;

      &--selected {
        background-color: t.color('secondary-container');
        color: t.color('on-secondary-container');
        transition: background-color $state-transition-duration $state-transition-easing,
                    color $state-transition-duration $state-transition-easing;

        &:hover {
          position: relative;
          
          &::before {
            content: '';
            position: absolute;
            inset: 0;
            background-color: t.color('on-secondary-container');
            opacity: f.get-state-opacity('hover');
            pointer-events: none;
            border-radius: inherit;
            transition: opacity $state-transition-duration $state-transition-easing;
          }
        }

        &:focus-visible {
          position: relative;
          outline: none;
          
          &::before {
            content: '';
            position: absolute;
            inset: 0;
            background-color: t.color('on-secondary-container');
            opacity: f.get-state-opacity('focus');
            pointer-events: none;
            border-radius: inherit;
            transition: opacity $state-transition-duration $state-transition-easing;
          }
        }

        &:active {
          position: relative;
          
          &::before {
            content: '';
            position: absolute;
            inset: 0;
            background-color: t.color('on-secondary-container');
            opacity: f.get-state-opacity('pressed');
            pointer-events: none;
            border-radius: inherit;
            transition: opacity $state-transition-duration $state-transition-easing;
          }
        }

        .#{$component}-item-supporting,
        .#{$component}-item-overline,
        .#{$component}-item-meta {
          color: t.color('on-secondary-container');
          transition: color $state-transition-duration $state-transition-easing;
        }
        
        .#{$component}-item-leading,
        .#{$component}-item-trailing {
          color: t.color('on-secondary-container');
          transition: color $state-transition-duration $state-transition-easing;
        }
      }
    }
  }

  // Dense variant
  &--dense {
    .#{$component}-item {
      min-height: $list-item-dense-height;
    }
  }

  // Disabled state
  &--disabled {
    pointer-events: none;
    opacity: 0.38;
    transition: opacity $state-transition-duration $state-transition-easing;
  }

  // RTL Support
  @include m.rtl {
    .#{$component}-section-title {
      text-align: right;
    }
  }

  // High contrast mode
  @include m.high-contrast {
    border: 1px solid currentColor;

    &-divider {
      border-top: 1px solid currentColor;
      background: none;
    }
  }
  
  // VIRTUAL LIST ITEM STYLES
  &-item {
    display: flex;
    align-items: center;
    min-height: $list-item-height;
    padding: $list-padding $list-item-padding;
    position: absolute; // Required for virtual list positioning
    top: 0;
    left: 0;
    width: 100%;
    gap: 16px;
    cursor: pointer;
    color: t.color('on-surface');
    box-sizing: border-box;
    position: relative; // Needed for state layers
    overflow: hidden;
    transition: background-color $state-transition-duration $state-transition-easing,
                color $state-transition-duration $state-transition-easing;

    // Use a single pseudo-element for all state layers
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      background-color: t.color('on-surface');
      opacity: 0; // Start with 0 opacity
      pointer-events: none;
      border-radius: inherit;
      transition: opacity $state-transition-duration $state-transition-easing;
    }

    // State layer implementation - strictly following MD3
    // Instead of recreating the pseudo-element, just change its opacity
    &:hover::before {
      opacity: f.get-state-opacity('hover');
    }

    &:focus-visible {
      outline: none; // Remove default outline
      
      &::before {
        opacity: f.get-state-opacity('focus');
      }
      
      // Focus ring
      &::after {
        content: '';
        position: absolute;
        inset: 0;
        border-radius: inherit;
        box-shadow: inset 0 0 0 2px t.color('primary');
        pointer-events: none;
        transition: box-shadow $state-transition-duration $state-transition-easing;
      }
    }

    &:active::before {
      opacity: f.get-state-opacity('pressed');
      // Using a slightly faster transition for press state feedback
      transition: opacity v.motion('duration-short4') v.motion('easing-standard-accelerate');
    }

    // Content layout
    &-content {
      flex: 1;
      min-width: 0; // Enable text truncation
      display: flex;
      flex-direction: column;
      justify-content: center;
      transition: opacity $state-transition-duration $state-transition-easing;
    }

    // Text elements
    &-text {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }

    &-overline {
      @include m.typography('label-small');
      color: t.color('on-surface-variant');
      transition: color $state-transition-duration $state-transition-easing;
    }

    &-headline {
      @include m.typography('body-large');
      color: t.color('on-surface');
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: color $state-transition-duration $state-transition-easing;
    }

    &-supporting {
      @include m.typography('body-medium');
      color: t.color('on-surface-variant');
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: color $state-transition-duration $state-transition-easing;
    }

    &-meta {
      @include m.typography('label-small');
      color: t.color('on-surface-variant');
      margin-top: 4px;
      transition: color $state-transition-duration $state-transition-easing;
    }

    // Leading/trailing elements
    &-leading,
    &-trailing {
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      transition: color $state-transition-duration $state-transition-easing,
                  opacity $state-transition-duration $state-transition-easing;
    }

    &-leading {
      width: 24px;
      height: 24px;
      color: t.color('on-surface-variant');

      svg {
        width: 100%;
        height: 100%;
        transition: fill $state-transition-duration $state-transition-easing,
                    stroke $state-transition-duration $state-transition-easing;
      }
    }

    &-trailing {
      color: t.color('on-surface-variant');
    }

    // Vertical layout variant
    &.vertical {
      min-height: 72px;
      padding: 12px $list-item-padding;

      .#{$component}-item {
        &-content {
          flex-direction: column;
          gap: 4px;
        }

        &-meta {
          margin-top: $list-padding;
        }
      }
    }

    // States - using the same pattern of a single pseudo-element
    &--selected {
      background-color: t.color('secondary-container');
      color: t.color('on-secondary-container');
      transition: background-color $state-transition-duration $state-transition-easing,
                  color $state-transition-duration $state-transition-easing;

      &::before {
        background-color: t.color('on-secondary-container'); // Change the color for the state layer
      }

      .#{$component}-item {
        &-leading,
        &-trailing {
          color: t.color('on-secondary-container');
          transition: color $state-transition-duration $state-transition-easing;
        }
      }
    }

    &--disabled {
      opacity: 0.38;
      pointer-events: none;
      transition: opacity $state-transition-duration $state-transition-easing;
    }

    // RTL Support
    @include m.rtl {
      .#{$component}-item {
        &-text {
          text-align: right;
        }
      }
    }

    // High contrast mode
    @include m.high-contrast {
      &--selected {
        outline: 2px solid currentColor;
        outline-offset: -2px;
      }
    }
    
    // Skeleton loading state for items
    &--skeleton {
      pointer-events: none;
      
      .#{$component}-item-headline,
      .#{$component}-item-supporting,
      .#{$component}-item-leading {
        background-color: t.color('surface-variant');
        border-radius: 4px;
        color: transparent;
        animation: skeleton-pulse 1.5s infinite;
      }
      
      .#{$component}-item-headline {
        width: 70%;
        height: 16px;
      }
      
      .#{$component}-item-supporting {
        width: 50%;
        height: 14px;
      }
    }
  }
}

// ANIMATIONS
@keyframes loading-shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

@keyframes rotation {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes skeleton-pulse {
  0%, 100% {
    opacity: 0.5;
  }
  50% {
    opacity: 0.8;
  }
}