// src/components/slider/_styles.scss
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;

// Define the transition properties for smoother animations with absolute positioning
$handle-transition: left 0.225s cubic-bezier(0.4, 0, 0.2, 1), transform 0.225s cubic-bezier(0.4, 0, 0.2, 1);
$bubble-transition: left 0.225s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.225s cubic-bezier(0.4, 0, 0.2, 1), visibility 0s linear 0.225s;
$bubble-transition-visible: left 0.225s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.225s cubic-bezier(0.4, 0, 0.2, 1), visibility 0s;

$component: '#{base.$prefix}-slider';

.#{$component} {
  // Base styles
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: column;
  user-select: none;
  touch-action: none;
  
  // Container should not have a focus outline
  &:focus {
    outline: none;
  }
  
  // Label styles
  &-label {
    display: block;
    font-size: 18px;
    font-weight: 400;
    color: t.color('on-surface');
    margin-bottom: 4px;
  }
  
  // Icon positioning
  &-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    color: t.color('on-surface-variant');
    position: absolute;
    width: 40px;
    height: 40px;
    top: 16px;
    
    svg {
      width: 24px;
      height: 24px;
    }
  }
  
  // When slider has icon at end position
  &--icon {
    .#{$component}-label {
      margin-left: 48px;
    }

    .#{$component}-container {
      margin-left: 48px;
    }
  }

  // Slider container - holds all the slider elements
  &-container {
    position: relative;
    height: 40px;
    display: flex;
    align-items: center;
  }

  // Canvas element for hybrid rendering
  &-canvas {
    position: absolute !important;
    top: 0;
    left: 0;
    width: 100% !important;
    height: 100% !important;
    pointer-events: none;
    z-index: 0;
  }
 
  // Handle - updated with T-shape and proper focus styles
  &-handle {
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    cursor: pointer;
    z-index: 4;
    padding: 4px 0;
    transition: $handle-transition;
    width: 14px;
    height: 50px;
    border-radius: 16px;
    background-color: rgba(red, .0);

    // Focus styles for keyboard navigation
    &:focus {
      outline: 2px solid t.color('outline');
    }
    
    // Class added when focused via keyboard
    &--focused {
      // Additional styling when focused
    }

    // Create a T-shaped handle using pseudo-elements
    &::before {
      pointer-events: none;
      content: '';
      position: absolute;
      width: 4px;
      height: calc(100% - 8px);
      background-color: t.color('primary');
      border-radius: 2px;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      transition: background-color 0.15s ease, width 0.15s ease;
      
      .#{$component}--secondary & {
        background-color: t.color('secondary');
      }
      
      .#{$component}--tertiary & {
        background-color: t.color('tertiary');
      }
      
      .#{$component}--error & {
        background-color: t.color('error');
      }
      
      .#{$component}--disabled & {
        background-color: t.color('on-surface');
        opacity: 0.38;
      }
    }
    
    // Disabled pointer events on the pseudo-element
    &::before {
      pointer-events: none;
    }
    
    // Make handle line slimmer during dragging (feedback)
    .#{$component}--dragging & {
      &::before {
        width: 3px;
      }
    }
    
    // Hover state
    &:hover::before {
      background-color: t.color('primary');
      
      .#{$component}--secondary & {
        background-color: t.color('secondary');
      }
      
      .#{$component}--tertiary & {
        background-color: t.color('tertiary');
      }
      
      .#{$component}--error & {
        background-color: t.color('error');
      }
      
      .#{$component}--disabled & {
        background-color: t.color('on-surface');
        opacity: 0.38;
      }
    }
    
    // Active state
    &:active::before {
      background-color: t.color('primary');
      width: 3px; // Shrink width when active for visual feedback
      
      .#{$component}--secondary & {
        background-color: t.color('secondary');
      }
      
      .#{$component}--tertiary & {
        background-color: t.color('tertiary');
      }
      
      .#{$component}--error & {
        background-color: t.color('error');
      }
    }
  }

  // Range slider styles
  &--range {
    .#{$component}-handle {
      &:nth-of-type(1) {
        z-index: 3;
      }
    }
    
    // In range mode, both dots should be visible
    .#{$component}-dot {
      z-index: 2;
    }
  }
  
  // Value bubble - shows current value during interaction
  &-value {
    position: absolute;
    top: -40px;
    left: 0;
    background-color: t.color('on-surface');
    color: t.color('surface-container-highest');
    padding: 6px 12px;
    border-radius: 21px;
    font-size: 14px;
    font-weight: 600;
    transform: translateX(-50%);
    visibility: hidden;
    opacity: 0;
    transition: $bubble-transition;
    pointer-events: none;
    
    // Show value when interacting
    &--visible {
      visibility: visible;
      opacity: 1;
      transition: $bubble-transition-visible;
    }
  }
  
  &--disabled {

    // Disabled state
    .#{$component}-handle {
      cursor: default;
      pointer-events: none;
      
      &::before {
        opacity: 0.38;
        background-color: t.color('on-surface');
      }
    }
  }

  // Discrete slider with steps
  &--discrete {
    .#{$component}-tick {
      width: 4px;
      height: 4px;
    }
  }
  
  // For dragging state - visual feedback
  &--dragging {
    // No transitions during dragging for responsive feel
    .#{$component}-handle,
    .#{$component}-value {
      transition: none;
    }
  }
}