// src/components/progress/_progress.scss - Canvas-based progress styles (no SVG dependency)
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;
@use 'sass:math';

$component: '#{base.$prefix}-progress';

// Material Design 3 spec constants - MUST match values in constants.ts
$linear-height: 4px;
$circular-size: 50px;
$stroke-width-thin: 4px;
$stroke-width-default: 6px;
$stroke-width-thick: 8px;
$linear-gap: 4px;

.#{$component} {
  // Base container styles
  position: relative;
  display: block;
  overflow: hidden;
  
  // Common accessibility attributes
  &[aria-disabled="true"] {
    opacity: 0.38;
    pointer-events: none;
  }

  // Canvas element - shared by both variants
  &-canvas {
    display: block;
    width: 100%;
    height: 100%;
    max-width: 100%; // Prevent canvas from growing beyond container
    box-sizing: border-box; // Include borders in width calculation
    
    // Smooth transitions for canvas transforms (used in animations)
    transition: transform 0.3s ease;
  }

  // Linear progress variant
  &--linear {
    width: 100%;
    height: $linear-height;
    min-height: $linear-height;
    margin: 0 4px;
    border-radius: calc(#{$linear-height} / 2);
    
    // Canvas fills the container
    .#{$component}-canvas {
      border-radius: inherit;
    }
    
    // Thickness variants
    &.#{$component}--thin {
      height: $stroke-width-thin;
      min-height: $stroke-width-thin;
      border-radius: calc(#{$stroke-width-thin} / 2);
    }
    
    &.#{$component}--thick {
      height: $stroke-width-thick;
      min-height: $stroke-width-thick;
      border-radius: calc(#{$stroke-width-thick} / 2);
    }
    
    // Indeterminate state - CSS animation for linear (non-wavy)
    &.#{$component}--indeterminate:not(.#{$component}--wavy) {
      
      .#{$component}-canvas {
        // CSS animation for linear indeterminate - moves the canvas content
        animation: linear-indeterminate-slide 2s infinite cubic-bezier(0.4, 0.0, 0.2, 1);
      }
    }
    
    // Wavy shape variant
    &.#{$component}--wavy {
      overflow: visible;
      height: 10px; // Slightly taller for wavy shape
      min-height: 10px;
      border-radius: 5px;
      
      // Wavy shapes are drawn entirely in canvas - no CSS animation needed
      // The wavy animation is handled by JavaScript requestAnimationFrame
      &.#{$component}--indeterminate {
        .#{$component}-canvas {
          // No CSS animation for wavy - handled by canvas drawing
          animation: none;
        }
      }
    }
  }

  // Circular progress variant
  &--circular {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: $circular-size;
    height: $circular-size;
    border-radius: 50%;
    
    // Canvas is square and fills the container
    .#{$component}-canvas {
      border-radius: 50%;
    }
    
    // Indeterminate state - rotation animation for circular
    &.#{$component}--indeterminate {
      .#{$component}-canvas {
        animation: circular-rotate 1.4s linear infinite;
      }
    }
  }
  
  // Label element (created dynamically when showLabel is used)
  &-label {
    position: absolute;
    font-size: 12px;
    color: t.color('on-surface-variant');
    white-space: nowrap;
    transition: opacity 0.3s ease;
    
    // Position differently based on variant
    .#{$component}--linear & {
      right: 0;
      top: calc(100% + 4px);
    }
    
    .#{$component}--circular & {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-weight: 500;
    }
  }
  
  // Disabled state
  &--disabled {
    opacity: 0.38;
    pointer-events: none;
    
    // Disable animations when disabled
    .#{$component}-canvas {
      animation: none !important;
    }
  }
  
  // Test mode (for debugging/development)
  &--test {
    border: 1px dashed t.alpha('primary', 0.5);
    
    .#{$component}-canvas {
      border: 1px solid t.alpha('secondary', 0.3);
    }
  }
}

// Keyframe animations

// Linear indeterminate animation - slides the progress bar (non-wavy only)
@keyframes linear-indeterminate-slide {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(300%);
  }
}

// Circular indeterminate animation - rotates the canvas
@keyframes circular-rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

// Reduced motion support
@media (prefers-reduced-motion: reduce) {
  .#{$component} {
    .#{$component}-canvas {
      animation-duration: 0.01ms !important;
      transition-duration: 0.01ms !important;
    }
  }
}

// High contrast mode support
@media (prefers-contrast: high) {
  .#{$component} {
    &--linear {
      border: 1px solid currentColor;
    }
    
    &--circular {
      border: 1px solid currentColor;
    }
  }
}

// Dark mode adaptations (if using CSS custom properties)
@media (prefers-color-scheme: dark) {
  .#{$component} {
    &--linear {
      // No background color needed - track drawn in canvas
    }
  }
}