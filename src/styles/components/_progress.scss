// src/components/progress/_styles.scss - Clean SCSS using CSS custom properties
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;
@use 'sass:math';

$component: '#{base.$prefix}-progress';

// Material Design 3 spec constants - MUST match values in constants.ts
$linear-height: 4px;
$circular-size: 50px;
$stroke-width-thin: 4px;
$stroke-width-default: 6px;
$stroke-width-thick: 8px;
$stop-indicator-size: 4px;
$linear-gap: 4px; // PROGRESS_MEASUREMENTS.LINEAR.GAP

.#{$component} {
  // Base styles
  position: relative;
  display: block;
  overflow: hidden;
  
  // CSS custom properties with defaults
  --progress-value: 0%;
  --progress-buffer: 0%;
  --progress-height: #{$linear-height};
  --progress-gap: #{$linear-gap};
  
  // Common accessibility attributes
  &[aria-disabled="true"] {
    opacity: 0.38;
    pointer-events: none;
  }

  // Linear progress variant - Clean CSS-only approach
  &--linear {
    width: 100%;
    height: var(--progress-height);
    min-height: var(--progress-height);
    margin: 0 4px;
    border-radius: calc(var(--progress-height) / 2);
    position: relative;
    
    // Track (background/remaining part)
    .#{$component}-track {
      position: absolute;
      top: 0;
      height: 100%;
      background-color: t.alpha('primary', 0.24);
      border-radius: inherit;
      // Track starts after indicator + gap, using CSS calc()
      left: calc(var(--progress-value) + var(--progress-gap));
      right: 0;
      display: block;
      // Smooth animation for position changes
      transition: left 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
    }
    
    // Buffer indicator (pre-loaded state)
    .#{$component}-buffer {
      position: absolute;
      top: 0;
      height: 100%;
      background-color: t.alpha('primary', 0.4);
      border-radius: inherit;
      // Buffer starts after indicator + gap
      left: calc(var(--progress-value) + var(--progress-gap));
      // Buffer width is the difference between buffer and current value
      width: calc(var(--progress-buffer) - var(--progress-value));
      display: none; // Hidden by default
      // Smooth animation for buffer changes
      transition: left 0.3s cubic-bezier(0.4, 0.0, 0.2, 1),
                 width 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
    }
    
    // Progress indicator (filled part)
    .#{$component}-indicator {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      background-color: t.color('primary');
      border-radius: inherit;
      width: var(--progress-value);
      // Smooth animation for progress changes - this is the key improvement!
      transition: width 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
    }

    // Special state: Zero progress (show as dot)
    &.#{$component}--zero {
      .#{$component}-indicator {
        width: var(--progress-height); // Circular dot
        border-radius: 50%;
      }
      
      .#{$component}-track {
        left: calc(var(--progress-height) + var(--progress-gap));
      }
      
      .#{$component}-buffer {
        left: calc(var(--progress-height) + var(--progress-gap));
        width: calc(var(--progress-buffer) - var(--progress-height));
      }
    }
    
    // Special state: Complete progress (hide track)
    &.#{$component}--complete {
      .#{$component}-track {
        display: none;
      }
    }
    
    // Show buffer when it has content
    &.#{$component}--has-buffer {
      .#{$component}-buffer {
        display: block;
      }
    }
    
    // Thickness variants
    &.#{$component}--thin {
      --progress-height: #{$stroke-width-thin};
    }
    
    &.#{$component}--thick {
      --progress-height: #{$stroke-width-thick};
    }
    
    // Stop indicator dot using pseudo-element
    &:not(.#{$component}--indeterminate):after {
      content: '';
      position: absolute;
      right: calc((var(--progress-height) / 2) - 2px);
      top: 50%;
      transform: translateY(-50%);
      width: $stop-indicator-size;
      height: $stop-indicator-size;
      border-radius: 50%;
      background-color: t.color('primary');
      display: block;
      // Smooth transition for stop indicator
      transition: opacity 0.3s ease;
    }

    // Indeterminate state - CSS animation for HTML elements
    &.#{$component}--indeterminate {
      .#{$component}-track {
        left: 0 !important;
        right: 0 !important;
        display: block !important;
      }
      
      .#{$component}-indicator {
        width: 40% !important;
        // Animated position for indeterminate state
        animation: linear-indeterminate-html 2s infinite cubic-bezier(0.4, 0.0, 0.2, 1);
      }
      
      .#{$component}-buffer {
        display: none !important;
      }
      
      // Hide stop indicator during indeterminate
      &:after {
        opacity: 0;
      }
    }
    
    // Label positioning
    .#{$component}-label {
      position: absolute;
      right: 0;
      top: calc(var(--progress-height) + 4px);
      font-size: 12px;
      color: t.color('on-surface-variant');
      transition: opacity 0.3s ease;
    }
  }

  // Circular progress variant - keep existing SVG-based styles
  &--circular {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: $circular-size;
    height: $circular-size;
    
    svg {
      width: 100%;
      height: 100%;
      transform: rotate(-90deg);
    }
    
    .#{$component}-indicator {
      stroke: t.color('primary');
      fill: none;
      stroke-linecap: round;
      transform-origin: center;
      // Smooth transitions for circular progress
      transition: stroke-dasharray 0.3s cubic-bezier(0.4, 0.0, 0.2, 1),
                 stroke-dashoffset 0.3s cubic-bezier(0.4, 0.0, 0.2, 1),
                 transform 0.3s ease,
                 // stroke-width 0.3s ease;
    }
    
    .#{$component}-track {
      stroke: t.alpha('primary', 0.24);
      fill: none;
      stroke-linecap: round;
      transform-origin: center;
      transition: stroke-dasharray 0.3s cubic-bezier(0.4, 0.0, 0.2, 1),
                 stroke-dashoffset 0.3s cubic-bezier(0.4, 0.0, 0.2, 1),
                 transform 0.3s ease,
                 stroke-width 0.3s ease;
    }
    
    // Indeterminate circular animation
    &.#{$component}--indeterminate {
      .#{$component}-indicator {
        stroke-dasharray: 283;
        animation: circular-indeterminate 1.5s linear infinite;
      }
      
      .#{$component}-track {
        display: block;
        stroke: t.alpha('primary', 0.24);
        stroke-dasharray: none;
        opacity: 1;
      }
    }
    
    .#{$component}-label {
      position: absolute;
      font-size: 12px;
      color: t.color('on-surface-variant');
    }
  }
  
  // Disabled state
  &--disabled {
    opacity: 0.38;
    pointer-events: none;
    
    // Disable animations when disabled
    * {
      transition: none !important;
      animation: none !important;
    }
  }


  &--wavy {
    overflow: initial;
    // height: 10px;
    &.#{$component}--linear {
      .#{$component}-indicator {
        position: absolute;
        left: 2px;
        top: -3px;
        height: 10px;
        background-color: transparent;
        background-repeat: repeat-x;
        background-size: auto 100%;
      }
    }
  }
}

// Keyframe animations

// Circular indeterminate animation - keep existing
@keyframes circular-indeterminate {
  0% {
    stroke-dashoffset: 283;
  }
  50% {
    stroke-dashoffset: 70;
  }
  100% {
    stroke-dashoffset: 283;
    transform: rotate(360deg);
  }
}

// HTML-based linear indeterminate animation
@keyframes linear-indeterminate-html {
  0% {
    left: -40%;
  }
  25% {
    left: -10%;
    width: 60%;
  }
  50% {
    left: 20%;
    width: 50%;
  }
  75% {
    left: 60%;
    width: 30%;
  }
  100% {
    left: 100%;
    width: 20%;
  }
}

// Reduced motion support
@media (prefers-reduced-motion: reduce) {
  .#{$component} {
    * {
      transition-duration: 0.01ms !important;
      animation-duration: 0.01ms !important;
    }
  }
}