// src/components/progress/_styles.scss
@use '../../styles/abstract/base' as base;
@use '../../styles/abstract/variables' as v;
@use '../../styles/abstract/functions' as f;
@use '../../styles/abstract/mixins' as m;
@use '../../styles/abstract/theme' as t;
@use 'sass:math';

$component: '#{base.$prefix}-progress';

// Material Design 3 spec constants - MUST match values in constants.ts
// If these values change, update PROGRESS_MEASUREMENTS in constants.ts
$linear-height: 4px; // PROGRESS_MEASUREMENTS.LINEAR.HEIGHT
$circular-size: 50px; // PROGRESS_MEASUREMENTS.CIRCULAR.SIZE
$stroke-width-thin: 4px; // PROGRESS_THICKNESS.THIN
$stroke-width-default: 6px; // PROGRESS_THICKNESS.DEFAULT
$stroke-width-thick: 8px; // PROGRESS_THICKNESS.THICK
$stop-indicator-size: 4px; // PROGRESS_MEASUREMENTS.LINEAR.STOP_INDICATOR

// Keyframes for SVG-based indeterminate linear progress
@keyframes indeterminate-bar {
  0% {
    x2: 0; 
    transform: translateX(-12%);
  }
  50% {
    x2: 33;
  }
  100% {
    x2: 12;
    transform: translateX(112%);
  }
}

.#{$component} {
  // Base styles
  position: relative;
  display: block;
  overflow: hidden;
  
  // Common accessibility attributes
  &[aria-disabled="true"] {
    opacity: 0.38;
    pointer-events: none;
  }

  // Linear progress variant - MD3 specs
  &--linear {
    width: 100%;
    // height: $linear-height; // MD3 spec height
    min-height: $linear-height; // Ensure minimum height
    border-radius: calc($linear-height / 2);
    
    // For SVG-based linear progress
    svg {
      overflow: visible; // Allow portions to extend outside container if needed
      width: 100%;
      height: 100%; // Match the container height
      min-height: $linear-height; // Ensure minimum height
      display: block; // Prevent any inline display issues
      
      line, .#{$component}-track, .#{$component}-buffer, .#{$component}-indicator {
        // Support for dynamic stroke-width from API
        transition: stroke-dasharray 0.3s ease, stroke-dashoffset 0.3s ease, 
                   x1 0.3s ease, x2 0.3s ease, stroke-width 0.3s ease;
        // Force visibility
        vector-effect: non-scaling-stroke;
      }
      
      .#{$component}-track {
        stroke: t.alpha('primary', 0.24);
        stroke-linecap: round;
        transition: all 0.3s ease;
      }
      
      .#{$component}-buffer {
        stroke: t.alpha('primary', 0.4);
        stroke-linecap: round;
        transition: all 0.3s ease;
      }
      
      .#{$component}-indicator {
        stroke: t.color('primary');
        stroke-linecap: round;
        transition: all 0.3s ease;
      }
    }
    
    // Stop indicator for determinate progress using pseudo-element
    &:not(.#{$component}--indeterminate):after {
      content: '';
      position: absolute;
      right: 0;
      top: 50%;
      transform: translateY(-50%);
      width: $stop-indicator-size;
      height: $stop-indicator-size;
      border-radius: 50%;
      background-color: t.color('primary');
      display: var(--stop-indicator, none); // Controlled via API
    }

    // Indeterminate animation for linear progress
    &.#{$component}--indeterminate {
      // Add a solid track for indeterminate state
      svg {
        .#{$component}-track {
          display: block;
          x1: 0;
          x2: 100; // Full width track
          stroke: t.alpha('primary', 0.24);
        }
        
        .#{$component}-indicator {
          // Position the SVG line with initial width
          x1: 0;
          x2: 40%; // Initial width is 40% of container
          // Set transform origin for scaling and translation
          transform-origin: left center;
          // Apply combined animation
          animation: linear-indeterminate 2s infinite linear;
        }
        
        .#{$component}-buffer {
          display: none;
        }
      }
    }
    
    // Label element
    .#{$component}-label {
      position: absolute;
      right: 0;
      top: calc($linear-height + 4px); // Position below the progress bar
      font-size: 12px;
      color: t.color('on-surface-variant');
    }
  }

  // Circular progress variant
  &--circular {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: $circular-size;
    height: $circular-size;
    
    svg {
      width: 100%;
      height: 100%;
      transform: rotate(-90deg);
    }
    
    .#{$component}-indicator {
      stroke: t.color('primary');
      fill: none;
      // Support for dynamic stroke-width from API
      stroke-linecap: round;
      transform-origin: center;
      transition: stroke-dasharray 0.3s ease, stroke-dashoffset 0.3s ease, 
                 transform 0.3s ease, stroke-width 0.3s ease;
    }
    
    .#{$component}-track {
      stroke: t.alpha('primary', 0.24);
      fill: none;
      // Support for dynamic stroke-width from API
      stroke-linecap: round;
      transform-origin: center;
      transition: stroke-dasharray 0.3s ease, stroke-dashoffset 0.3s ease, 
                 transform 0.3s ease, stroke-width 0.3s ease;
    }
    
    // Indeterminate animation for circular progress
    &.#{$component}--indeterminate {
      .#{$component}-indicator {
        stroke-dasharray: 283; // 2*PI*45 (full circumference)
        animation: circular-indeterminate 1.5s linear infinite;
      }
      
      .#{$component}-track {
        display: block;
        stroke: t.alpha('primary', 0.24);
        stroke-dasharray: none; // Solid line, not dashed
        opacity: 1; // Make sure it's visible
      }
    }
    
    .#{$component}-label {
      position: absolute;
      font-size: 12px;
      color: t.color('on-surface-variant');
    }
  }
  
  // Disabled state
  &--disabled {
    opacity: 0.38;
    pointer-events: none;
  }
  
  // Thickness variants - these apply default values that can be overridden by the API
  &--thin {
    .#{$component}-indicator, .#{$component}-track, .#{$component}-buffer {
      stroke-width: $stroke-width-thin;
    }
  }
  
  &--thick {
    .#{$component}-indicator, .#{$component}-track, .#{$component}-buffer {
      stroke-width: $stroke-width-thick;
    }
  }
}

// Keyframes for indeterminate animations

@keyframes circular-indeterminate {
  0% {
    stroke-dashoffset: 283;
  }
  50% {
    stroke-dashoffset: 70;
  }
  100% {
    stroke-dashoffset: 283;
    transform: rotate(360deg);
  }
}

@keyframes linear-indeterminate {
  0% {
    transform: translateX(-10%) scaleX(0); // Start off-screen left, zero width
  }
  25% {
    transform: translateX(20%) scaleX(0.30); // Near middle, 20% width (0.5 * 40%)
  }
  50% {
    transform: translateX(50%) scaleX(0.55); // Past middle, shrinking
  }
  75% {
    transform: translateX(80%) scaleX(0.30); // Near end, zero width
  }
  100% {
    transform: translateX(110%) scaleX(0); // Off-screen right, zero width
  }
}