// src/styles/main.scss

// Abstract layer
@use 'abstract/base';
@use 'abstract/variables';
@use 'abstract/functions';
@use 'abstract/mixins';
@use 'abstract/theme';

// Themes
@use 'themes/index';

// Reset
@use 'base/reset';
@use 'base/typography';

// Components
@use '../components/button/styles';
@use '../components/checkbox/styles';
@use '../components/container/styles';
@use '../components/list/styles';
@use '../components/menu/styles';
@use '../components/navigation/styles';
@use '../components/snackbar/styles';
@use '../components/switch/styles';
@use '../components/textfield/styles';


@use '../core/build/ripple/ripple';

// Utilities
@use 'utilities/spacing';
@use 'utilities/visibility';
@use 'utilities/colors';
@use 'utilities/flexbox';
@use 'utilities/typography';

// Initialize theme system
:root {
  // Apply the base theme CSS variables
  @include theme.light-theme;

  // State layer variables
  @each $key, $value in theme.$mtrl-sys-state {
    --#{base.$prefix}-sys-state-#{$key}: #{$value};
  }
  
  // Motion variables
  @each $key, $value in theme.$mtrl-sys-motion {
    --#{base.$prefix}-sys-motion-#{$key}: #{$value};
  }

  // Shape variables
  @each $key, $value in theme.$mtrl-sys-shape {
    --#{base.$prefix}-sys-shape-#{$key}: #{$value};
  }
  
  // Typography
  @each $scale, $properties in variables.$typescale {
    --#{base.$prefix}-sys-typescale-#{$scale}-font-family-name: #{nth(map-get($properties, font-family), 1)};
    --#{base.$prefix}-sys-typescale-#{$scale}-font-family-fallback: #{if(length(map-get($properties, font-family)) > 1, nth(map-get($properties, font-family), 2), 'sans-serif')};
    --#{base.$prefix}-sys-typescale-#{$scale}-font-size: #{map-get($properties, font-size)};
    --#{base.$prefix}-sys-typescale-#{$scale}-line-height: #{map-get($properties, line-height)};
    --#{base.$prefix}-sys-typescale-#{$scale}-letter-spacing: #{map-get($properties, letter-spacing)};
    --#{base.$prefix}-sys-typescale-#{$scale}-font-weight: #{map-get($properties, font-weight)};
  }
}

// Dark mode support
@media (prefers-color-scheme: dark) {
  :root:not([data-theme]) {
    @include theme.dark-theme;
  }
}

// Base styles
body {
  margin: 0;
  padding: 0;
  background-color: var(--#{base.$prefix}-sys-color-surface);
  color: var(--#{base.$prefix}-sys-color-on-surface);
  font-family: var(--#{base.$prefix}-sys-typescale-body-medium-font-family-name, 'Roboto'), 
               var(--#{base.$prefix}-sys-typescale-body-medium-font-family-fallback, sans-serif);
  font-size: var(--#{base.$prefix}-sys-typescale-body-medium-font-size);
  line-height: var(--#{base.$prefix}-sys-typescale-body-medium-line-height);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  
  @include mixins.motion-transition(background-color, color);
}

// Ensure links have the correct contrast
a {
  color: var(--#{base.$prefix}-sys-color-primary);
  text-decoration: none;
  
  &:hover {
    text-decoration: underline;
  }
  
  &:focus-visible {
    outline: 2px solid var(--#{base.$prefix}-sys-color-primary);
    outline-offset: 2px;
  }
}

// Focus styles for keyboard navigation
:focus-visible {
  outline: 2px solid var(--#{base.$prefix}-sys-color-primary);
  outline-offset: 2px;
}

// Use smooth scrolling for the page
html {
  scroll-behavior: smooth;
  
  @include mixins.reduced-motion {
    scroll-behavior: auto;
  }
}

// Set box-sizing for all elements
*, *::before, *::after {
  box-sizing: border-box;
}