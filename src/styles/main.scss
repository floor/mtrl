// src/styles/main.scss

// Import Sass modules
@use 'sass:map';
@use 'sass:list' as sasslist;
@use 'sass:math';

// Abstract layer
@use 'abstract/base';
@use 'abstract/variables' as v;
@use 'abstract/functions' as f;
@use 'abstract/mixins' as m;
@use 'abstract/theme' as t;


// Utilities
@use 'utilities/spacing';
@use 'utilities/visibility';
@use 'utilities/colors';
@use 'utilities/flexbox';
@use 'utilities/typography';

// Themes
@use 'themes/index';

// Reset
@use 'base/reset';
//@use 'base/typography';

// Components
@use './components/textfield' as textfield;
@use './components/badge' as badge;
@use './components/bottom-app-bar' as bottom-app-bar;
@use './components/menu' as menu;
@use './components/slider' as slider;
@use './components/switch' as switch;
@use './components/tabs' as tabs;
@use './components/top-app-bar' as top-app-bar;

@use '../components/styles/button' as button;
@use '../components/styles/fab' as fab;
@use '../components/styles/extended-fab' as extended-fab;
@use '../components/styles/segmented-button' as segmented-button;
@use '../components/styles/card' as card;
@use '../components/styles/carousel' as carousel;
@use '../components/styles/checkbox' as checkbox;
@use '../components/styles/chip' as chip;
@use '../components/styles/datepicker' as datepicker;
@use '../components/styles/dialog' as dialog;
@use '../components/styles/divider' as divider;

@use '../components/styles/progress' as progress;

@use '../components/styles/radios' as radios;
@use '../components/styles/timepicker' as timepicker;
@use '../components/styles/search' as search;

@use '../components/styles/snackbar' as snackbar;
@use '../components/styles/navigation' as navigation;
@use '../components/styles/list' as list;

@use '../core/build/ripple';

// Initialize theme system
:root {
  // Apply the base theme CSS variables
  @include t.light-theme;

  // State layer variables - accessing individual values
  --#{base.$prefix}-sys-state-hover-state-layer-opacity: #{v.state('hover-state-layer-opacity')};
  --#{base.$prefix}-sys-state-focus-state-layer-opacity: #{v.state('focus-state-layer-opacity')};
  --#{base.$prefix}-sys-state-pressed-state-layer-opacity: #{v.state('pressed-state-layer-opacity')};
  --#{base.$prefix}-sys-state-dragged-state-layer-opacity: #{v.state('dragged-state-layer-opacity')};
  
  // Motion variables - accessing individual values
  --#{base.$prefix}-sys-motion-duration-short1: #{v.motion('duration-short1')};
  --#{base.$prefix}-sys-motion-duration-short2: #{v.motion('duration-short2')};
  --#{base.$prefix}-sys-motion-duration-short3: #{v.motion('duration-short3')};
  --#{base.$prefix}-sys-motion-duration-short4: #{v.motion('duration-short4')};
  --#{base.$prefix}-sys-motion-duration-medium1: #{v.motion('duration-medium1')};
  --#{base.$prefix}-sys-motion-duration-medium2: #{v.motion('duration-medium2')};
  --#{base.$prefix}-sys-motion-duration-long1: #{v.motion('duration-long1')};
  --#{base.$prefix}-sys-motion-duration-long2: #{v.motion('duration-long2')};
  --#{base.$prefix}-sys-motion-easing-standard: #{v.motion('easing-standard')};
  --#{base.$prefix}-sys-motion-easing-standard-accelerate: #{v.motion('easing-standard-accelerate')};
  --#{base.$prefix}-sys-motion-easing-standard-decelerate: #{v.motion('easing-standard-decelerate')};
  --#{base.$prefix}-sys-motion-easing-emphasized: #{v.motion('easing-emphasized')};
  --#{base.$prefix}-sys-motion-easing-emphasized-accelerate: #{v.motion('easing-emphasized-accelerate')};
  --#{base.$prefix}-sys-motion-easing-emphasized-decelerate: #{v.motion('easing-emphasized-decelerate')};

  // Shape variables - accessing individual values
  --#{base.$prefix}-sys-shape-none: #{v.shape('none')};
  --#{base.$prefix}-sys-shape-extra-tiny: #{v.shape('extra-tiny')};
  --#{base.$prefix}-sys-shape-tiny: #{v.shape('tiny')};
  --#{base.$prefix}-sys-shape-extra-small: #{v.shape('extra-small')};
  --#{base.$prefix}-sys-shape-small: #{v.shape('small')};
  --#{base.$prefix}-sys-shape-medium: #{v.shape('medium')};
  --#{base.$prefix}-sys-shape-large: #{v.shape('large')};
  --#{base.$prefix}-sys-shape-extra-large: #{v.shape('extra-large')};
  --#{base.$prefix}-sys-shape-full: #{v.shape('full')};
  --#{base.$prefix}-sys-shape-pill: #{v.shape('pill')};
  
  // Typography - extracting individual properties
  @each $scale, $properties in v.$typescale {
    $font-family: map.get($properties, 'font-family');
    $primary-font: sasslist.nth($font-family, 1);
    $fallback-font: if(sasslist.length($font-family) > 1, sasslist.nth($font-family, 2), 'sans-serif');
    
    --#{base.$prefix}-sys-typescale-#{$scale}-font-family-name: #{$primary-font};
    --#{base.$prefix}-sys-typescale-#{$scale}-font-family-fallback: #{$fallback-font};
    --#{base.$prefix}-sys-typescale-#{$scale}-font-size: #{map.get($properties, 'font-size')};
    --#{base.$prefix}-sys-typescale-#{$scale}-line-height: #{map.get($properties, 'line-height')};
    --#{base.$prefix}-sys-typescale-#{$scale}-letter-spacing: #{map.get($properties, 'letter-spacing')};
    --#{base.$prefix}-sys-typescale-#{$scale}-font-weight: #{map.get($properties, 'font-weight')};
  }
}

// Dark mode support
@media (prefers-color-scheme: dark) {
  :root:not([data-theme]) {
    @include t.dark-theme;
  }
}

// Base styles
body {
  margin: 0;
  padding: 0;
  background-color: var(--#{base.$prefix}-sys-color-surface);
  color: var(--#{base.$prefix}-sys-color-on-surface);
  font-family: var(--#{base.$prefix}-sys-typescale-body-medium-font-family-name, 'Roboto'), 
               var(--#{base.$prefix}-sys-typescale-body-medium-font-family-fallback, sans-serif);
  font-size: var(--#{base.$prefix}-sys-typescale-body-medium-font-size);
  line-height: var(--#{base.$prefix}-sys-typescale-body-medium-line-height);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  
  @include m.motion-transition(background-color, color);
}

// Ensure links have the correct contrast
a {
  color: var(--#{base.$prefix}-sys-color-primary);
  text-decoration: none;
  
  &:hover {
    text-decoration: underline;
  }
  
  &:focus-visible {
    outline: 2px solid var(--#{base.$prefix}-sys-color-primary);
    outline-offset: 2px;
  }
}

// Focus styles for keyboard navigation
:focus-visible {
  outline: 2px solid var(--#{base.$prefix}-sys-color-primary);
  outline-offset: 2px;
}

// Use smooth scrolling for the page
html {
  scroll-behavior: smooth;
  
  @include m.reduced-motion {
    scroll-behavior: auto;
  }
}

// Set box-sizing for all elements
*, *::before, *::after {
  box-sizing: border-box;
}